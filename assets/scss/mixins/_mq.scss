// -------------------------------------------------------------------------
// Media Query Helper
//
// Requires: "strip"
//
// Examples: http://sassmeister.com/gist/11261921
//
// References:
// http://alwaystwisted.com/post.php?s=2013-04-01-my-media-query-mixin
// http://jakearchibald.github.io/sass-ie/
// -------------------------------------------------------------------------
// For browsers that do not support media queries, create a separate stylesheet
// and set $fixed-width to the desired width. This will allow any styles in
// media queries that are less than the fixed width to be inserted directly.
$fixed-width: false !default;

// To break up a stylesheet into separate files based on breakpoints, set cutoff
// vars in each sheet and only matching media queries will be outputted.
$mq-min-cutoff: false !default;
$mq-max-cutoff: false !default;

//------------------------------------------------------------------------//
// Helper function to check if media query falls within a fixed width
//------------------------------------------------------------------------//
@function mq-width-check( $mq-prefix, $mq-width, $cutoff: $fixed-width, $cutoff-prefix: 'max' ) {
  // Check to make sure width is a number
  @if type-of( $mq-width ) == 'number' {
    @if unitless( $mq-width ) {
      $mq-width: $mq-width * 1px;
    }
    // em or rem
    @else if unit( $mq-width ) == 'em' or unit( $mq-width ) == 'rem' {
      $mq-width: strip( $mq-width ) * 16px;
    }
  }
  @else {
    @warn "Media query value is not a number: #{$width}";
    @return false;
  }

  // Compare width to cutoff
  @if $cutoff-prefix == 'max' {
    @if $mq-prefix == 'min' and $mq-width <= $cutoff {
      @return true;
    }
    @else if $mq-prefix == 'max' and $mq-width >= $cutoff {
      @return true;
    }
    @else {
      @return false;
    }
  }
  @else if $cutoff-prefix == 'min' {
    @if $mq-prefix == 'min' and $mq-width >= $cutoff {
      @return true;
    }
    @else if $mq-prefix == 'max' and $mq-width >= $cutoff {
      @return true;
    }
    @else {
      @return false;
    }
  }
  @else {
    @warn '$cutoff-prefix of “#{$cutoff-prefix}” is not valid in mq-width-check()';
    @return false;
  }
}

//------------------------------------------------------------------------//
// Media Query Mixin
//------------------------------------------------------------------------//
@mixin mq( $breakpoints... ) {
  // Check for fixed width or media query cutoff variables
  $hasCutoff: $fixed-width or $mq-min-cutoff or $mq-max-cutoff;

  // If onyl one argument passed, set $brakpoint equal to that argument
  @if length( $breakpoints ) == 1 {
    $breakpoints: nth( $breakpoints, 1 );
  }

  //------------------------------------------------------------------------//
  // Sass Map Argument
  //
  // Example: mq(( condition: value[, condition: value, ...] ))
  //------------------------------------------------------------------------//
  @if type-of( $breakpoints ) == 'map' {
    // Convert breakpoints map to media query string
    $mq-conditions: '';
    @each $type, $value in $breakpoints {
      $mq-conditions: str-insert( $mq-conditions, 'and (#{$type}: #{$value})', -1);
    }

    // Check for cutoff vars, run tests if present
    @if $hasCutoff {
      $pass-test: false;

      // Loop through each media-query condition and test
      @each $type, $mq-width in $breakpoints {
        $split-index: str-index( $type, '-' );
        $prefix: str-slice( $type, 1, $split-index - 1 );
        $suffix: str-slice( $type, $split-index + 1, -1 );
        // Only test the width, ignore min/max-height
        @if $suffix == 'width' {
          // Test fixed width cutoff (max-width)
          @if $fixed-width and mq-width-check($prefix, $mq-width, $fixed-width, 'max') {
            $pass-test: true;
          }
          // Test both min and max-width cutoffs
          @if $mq-min-cutoff and $mq-max-cutoff {
            @if mq-width-check($prefix, $mq-width, $mq-min-cutoff, 'min') and mq-width-check($prefix, $mq-width, $mq-max-cutoff, 'max') {
              $pass-test: true;
            }
          }
          // Test min-width cutoff
          @else if $mq-min-cutoff and mq-width-check($prefix, $mq-width, $mq-min-cutoff, 'min') {
            $pass-test: true;
          }
          // Test max-width cutoff
          @else if $mq-max-cutoff and mq-width-check($prefix, $mq-width, $mq-max-cutoff, 'max') {
            $pass-test: true;
          }
        }
        @else {
          $pass-test: true;
        }
      }

      // If passed test, output the styles
      @if $pass-test {
        // Do not output media queries for fixed width stylehseets
        @if $fixed-width {
          @content;
        }
        // Output the media query
        @else {
          @media screen #{$mq-conditions} {
            @content;
          }
        }
      }
    }
    // No cutoff vars set, so output the media query
    @else {
      @media screen #{$mq-conditions} {
        @content;
      }
    }
  }

  //------------------------------------------------------------------------//
  // String Argument(s)
  //
  // mq( width, [min/max] )
  //------------------------------------------------------------------------//
  @else {
    $mq-width: $breakpoints;
    $prefix: 'min';// Default

    // If second argument was passed, use as prefix
    @if length( $breakpoints ) >= 2 {
      $mq-width: nth( $breakpoints, 1 );
      $prefix: nth( $breakpoints, 2 );
    }
    // If more than 2 args passed, output a warning
    @else if length( $breakpoints ) > 2 {
      @warn "Too many arguments passed: mq(#{$breakpoints})";
    }

    // Generate the media query

    // Change unitles values to px
    @if unitless( $mq-width ) {
      $mq-width: $mq-width * 1px;
    }

    // Check for cutoff vars, run tests if present
    @if $hasCutoff {
      $pass-test: false;

      // Test fixed width cutoff (max-width)
      @if $fixed-width and mq-width-check($prefix, $mq-width, $fixed-width, 'max') {
        $pass-test: true;
      }
      // Test both min and max-width cutoffs
      @if $mq-min-cutoff and $mq-max-cutoff {
        @if mq-width-check($prefix, $mq-width, $mq-min-cutoff, 'min') and mq-width-check($prefix, $mq-width, $mq-max-cutoff, 'max') {
          $pass-test: true;
        }
      }
      // Test min-width cutoff
      @else if $mq-min-cutoff and mq-width-check($prefix, $mq-width, $mq-min-cutoff, 'min') {
          $pass-test: true;
      }
      // Test max-width cutoff
      @else if $mq-max-cutoff and mq-width-check($prefix, $mq-width, $mq-max-cutoff, 'max') {
          $pass-test: true;
      }

      // If passed test, output the styles
      @if $pass-test {
        // Do not output media queries for fixed width stylehseets
        @if $fixed-width {
          @content;
        }
        // Output the media query
        @else {
          @media screen and (#{$prefix}-width: $mq-width) {
            @content;
          }
        }
      }
    }
    // No cutoff vars set, so output the media query
    @else {
      @media screen and (#{$prefix}-width: $mq-width) {
        @content;
      }
    }
  }
}